//    _____ ______ _   _ ______ _____         _______ ______ _____  
//   / ____|  ____| \ | |  ____|  __ \     /\|__   __|  ____|  __ \ 
//  | |  __| |__  |  \| | |__  | |__) |   /  \  | |  | |__  | |  | |
//  | | |_ |  __| | .   |  __| |  _  /   / /\ \ | |  |  __| | |  | |
//  | |__| | |____| |\  | |____| | \ \  / ____ \| |  | |____| |__| |
//   \_____|______|_| \_|______|_|  \_\/_/    \_\_|  |______|_____/ 

// This file was automatically generated by scripts/generateIPCFiles.ts
// Do not edit this file manually, as your changes will be overwritten.

import { ipcMain, IpcMainInvokeEvent } from "electron";
import { Smule } from "../api/smule";
export function initializeIPCHandler(client: Smule) {
    ipcMain.handle("smule.account.lookup.byEmail", async (_event: IpcMainInvokeEvent, email: string): Promise<{ accountIcon: import("../api/smule-types").AccountIcon; apps: string[]; }> => await client.account.lookup.byEmail(email))
    ipcMain.handle("smule.account.lookup.byIds", async (_event: IpcMainInvokeEvent, accountIds: number[]): Promise<import("../api/smule-types").UsersLookupResult> => await client.account.lookup.byIds(accountIds))
    ipcMain.handle("smule.account.lookup.byId", async (_event: IpcMainInvokeEvent, accountId: number): Promise<import("../api/smule-types").AccountIcon> => await client.account.lookup.byId(accountId))
    ipcMain.handle("smule.account.loginAsGuest", async (_event: IpcMainInvokeEvent): Promise<boolean> => await client.account.loginAsGuest())
    ipcMain.handle("smule.account.login", async (_event: IpcMainInvokeEvent, email: string, password: string): Promise<boolean> => await client.account.login(email, password))
    ipcMain.handle("smule.account.refreshLogin", async (_event: IpcMainInvokeEvent): Promise<boolean> => await client.account.refreshLogin())
    ipcMain.handle("smule.account.isLoggedIn", async (_event: IpcMainInvokeEvent): Promise<boolean> => await client.account.isLoggedIn())
    ipcMain.handle("smule.account.fetchSelf", async (_event: IpcMainInvokeEvent): Promise<import("../api/smule-types").ProfileResult> => await client.account.fetchSelf())
    ipcMain.handle("smule.account.fetchOne", async (_event: IpcMainInvokeEvent, accountId: number): Promise<import("../api/smule-types").ProfileResult> => await client.account.fetchOne(accountId))
    ipcMain.handle("smule.social.followingUsers", async (_event: IpcMainInvokeEvent, accountIds: number[]): Promise<import("../api/smule-types").FollowingResult> => await client.social.followingUsers(accountIds))
    ipcMain.handle("smule.social.followingUser", async (_event: IpcMainInvokeEvent, accountId: number): Promise<import("../api/smule-types").FollowingResult> => await client.social.followingUser(accountId))
    ipcMain.handle("smule.social.followUsers", async (_event: IpcMainInvokeEvent, accountIds: number[]): Promise<void> => await client.social.followUsers(accountIds))
    ipcMain.handle("smule.social.followUser", async (_event: IpcMainInvokeEvent, accountId: number): Promise<void> => await client.social.followUser(accountId))
    ipcMain.handle("smule.social.unfollowUsers", async (_event: IpcMainInvokeEvent, accountIds: number[]): Promise<void> => await client.social.unfollowUsers(accountIds))
    ipcMain.handle("smule.social.unfollowUser", async (_event: IpcMainInvokeEvent, accountId: number): Promise<void> => await client.social.unfollowUser(accountId))
    ipcMain.handle("smule.social.fetchFollowings", async (_event: IpcMainInvokeEvent, accountId: number): Promise<import("../api/smule-types").FolloweeResult> => await client.social.fetchFollowings(accountId))
    ipcMain.handle("smule.social.fetchFollowers", async (_event: IpcMainInvokeEvent, accountId: number): Promise<import("../api/smule-types").FollowersResult> => await client.social.fetchFollowers(accountId))
    ipcMain.handle("smule.social.fetchComments", async (_event: IpcMainInvokeEvent, performanceKey: string, offset?: number, limit?: number): Promise<import("../api/smule-types").PerformanceCommentsResult> => await client.social.fetchComments(performanceKey, offset, limit))
    ipcMain.handle("smule.social.likeComment", async (_event: IpcMainInvokeEvent, performanceKey: string, commentKey: string): Promise<void> => await client.social.likeComment(performanceKey, commentKey))
    ipcMain.handle("smule.social.unlikeComment", async (_event: IpcMainInvokeEvent, performanceKey: string, commentKey: string): Promise<void> => await client.social.unlikeComment(performanceKey, commentKey))
    ipcMain.handle("smule.social.fetchCommentLikes", async (_event: IpcMainInvokeEvent, performanceKey: string, commentKey: string): Promise<import("../api/smule-types").CommentLikesResult> => await client.social.fetchCommentLikes(performanceKey, commentKey))
    ipcMain.handle("smule.social.likePerformance", async (_event: IpcMainInvokeEvent, performanceKey: string): Promise<void> => await client.social.likePerformance(performanceKey))
    ipcMain.handle("smule.social.fetchBlocked", async (_event: IpcMainInvokeEvent): Promise<import("../api/smule-types").SocialBlockListResult> => await client.social.fetchBlocked())
    ipcMain.handle("smule.social.blockUsers", async (_event: IpcMainInvokeEvent, accountIds: number[]): Promise<void> => await client.social.blockUsers(accountIds))
    ipcMain.handle("smule.social.blockUser", async (_event: IpcMainInvokeEvent, accountId: number): Promise<void> => await client.social.blockUser(accountId))
    ipcMain.handle("smule.social.unblockUsers", async (_event: IpcMainInvokeEvent, accountIds: number[]): Promise<void> => await client.social.unblockUsers(accountIds))
    ipcMain.handle("smule.social.unblockUser", async (_event: IpcMainInvokeEvent, accountId: number): Promise<void> => await client.social.unblockUser(accountId))
    ipcMain.handle("smule.social.fetchProfileViews", async (_event: IpcMainInvokeEvent, period?: "WEEK" | "MONTH" | "QUARTER", cursor?: string, limit?: number): Promise<import("../api/smule-types").ProfileViewsResult> => await client.social.fetchProfileViews(period, cursor, limit))
    ipcMain.handle("smule.social.fetchPersonalInvites", async (_event: IpcMainInvokeEvent, cursor?: string, limit?: number): Promise<import("../api/smule-types").InviteMeResult> => await client.social.fetchPersonalInvites(cursor, limit))
    ipcMain.handle("smule.social.fetchInvites", async (_event: IpcMainInvokeEvent, cursor?: string, limit?: number): Promise<import("../api/smule-types").InviteListResult> => await client.social.fetchInvites(cursor, limit))
    ipcMain.handle("smule.social.inviteViaChat", async (_event: IpcMainInvokeEvent, accountIds: number[], performanceKey: string): Promise<any> => await client.social.inviteViaChat(accountIds, performanceKey))
    ipcMain.handle("smule.songs.fetchSongbook", async (_event: IpcMainInvokeEvent, cursor?: string, limit?: number): Promise<import("../api/smule-types").SongbookResult> => await client.songs.fetchSongbook(cursor, limit))
    ipcMain.handle("smule.songs.updateSongbook", async (_event: IpcMainInvokeEvent, categoryIds: number[]): Promise<any> => await client.songs.updateSongbook(categoryIds))
    ipcMain.handle("smule.songs.fetchFromCategory", async (_event: IpcMainInvokeEvent, cursor?: string, categoryId?: number, limit?: number, duetAccountId?: number): Promise<import("../api/smule-types").CategorySongsResult> => await client.songs.fetchFromCategory(cursor, categoryId, limit, duetAccountId))
    ipcMain.handle("smule.songs.fetchCategoryList", async (_event: IpcMainInvokeEvent, sortType?: "POPULAR" | "ALPHA"): Promise<import("../api/smule-types").CategoryListResult> => await client.songs.fetchCategoryList(sortType))
    ipcMain.handle("smule.songs.fetchOne", async (_event: IpcMainInvokeEvent, key: string): Promise<import("../api/smule-types").ArrResult> => await client.songs.fetchOne(key))
    ipcMain.handle("smule.songs.fetchOneFromRaven", async (_event: IpcMainInvokeEvent, ravenSongId: string): Promise<import("../api/smule-types").ArrResult> => await client.songs.fetchOneFromRaven(ravenSongId))
    ipcMain.handle("smule.songs.fetch", async (_event: IpcMainInvokeEvent, keys: string[]): Promise<import("../api/smule-types").ArrByKeysResult> => await client.songs.fetch(keys))
    ipcMain.handle("smule.songs.fetchOwnedBy", async (_event: IpcMainInvokeEvent, ownerId: number, offset?: number, limit?: number): Promise<any> => await client.songs.fetchOwnedBy(ownerId, offset, limit))
    ipcMain.handle("smule.songs.bookmark", async (_event: IpcMainInvokeEvent, key: string): Promise<any> => await client.songs.bookmark(key))
    ipcMain.handle("smule.songs.unbookmark", async (_event: IpcMainInvokeEvent, key: string): Promise<any> => await client.songs.unbookmark(key))
    ipcMain.handle("smule.songs.fetchBookmarks", async (_event: IpcMainInvokeEvent, cursor?: string, limit?: number): Promise<any> => await client.songs.fetchBookmarks(cursor, limit))
    ipcMain.handle("smule.songs.update", async (_event: IpcMainInvokeEvent, key: string, artist?: string, name?: string, tags?: string[]): Promise<any> => await client.songs.update(key, artist, name, tags))
    ipcMain.handle("smule.songs.vote", async (_event: IpcMainInvokeEvent, key: string, arrVersion: number, reason: string, vote: "UP" | "DOWN"): Promise<any> => await client.songs.vote(key, arrVersion, reason, vote))
    ipcMain.handle("smule.songs.delete", async (_event: IpcMainInvokeEvent, key: string, deletePerformances?: boolean): Promise<any> => await client.songs.delete(key, deletePerformances))
    ipcMain.handle("smule.performances.lookUp.byKeys", async (_event: IpcMainInvokeEvent, performanceKeys: string[]): Promise<import("../api/smule-types").PerformanceByKeysResult> => await client.performances.lookUp.byKeys(performanceKeys))
    ipcMain.handle("smule.performances.lookUp.byKey", async (_event: IpcMainInvokeEvent, performanceKey: string): Promise<import("../api/smule-types").PerformanceIcon> => await client.performances.lookUp.byKey(performanceKey))
    ipcMain.handle("smule.performances.lookUp.byUser", async (_event: IpcMainInvokeEvent, accountId: number, limit?: number, offset?: number): Promise<import("../api/smule-types").PerformancesByUserResult> => await client.performances.lookUp.byUser(accountId, limit, offset))
    ipcMain.handle("smule.performances.lookUp.byAvTemplate", async (_event: IpcMainInvokeEvent, templateId: number, cursor?: string, limit?: number, performanceKey?: string): Promise<import("../api/smule-types").PerformancesByAvTemplateResult> => await client.performances.lookUp.byAvTemplate(templateId, cursor, limit, performanceKey))
    ipcMain.handle("smule.performances.list", async (_event: IpcMainInvokeEvent, sort?: import("../api/smule-types").PerformancesSortOrder, fillStatus?: import("../api/smule-types").PerformancesFillStatus, limit?: number, offset?: number): Promise<import("../api/smule-types").PerformanceList> => await client.performances.list(sort, fillStatus, limit, offset))
    ipcMain.handle("smule.performances.fetchLists", async (_event: IpcMainInvokeEvent, requests: import("../api/smule-types").PerformanceReq[]): Promise<{ perfLists: import("../api/smule-types").PerformanceList[]; }> => await client.performances.fetchLists(requests))
    ipcMain.handle("smule.performances.fetchOne", async (_event: IpcMainInvokeEvent, performanceKey: string): Promise<import("../api/smule-types").PerformanceResult> => await client.performances.fetchOne(performanceKey))
    ipcMain.handle("smule.performances.fetchFromAccount", async (_event: IpcMainInvokeEvent, accountId: number, fillStatus?: import("../api/smule-types").PerformancesFillStatus, sortMethod?: import("../api/smule-types").PerformanceSortMethod, limit?: number, offset?: number): Promise<import("../api/smule-types").PerformancePartsResult> => await client.performances.fetchFromAccount(accountId, fillStatus, sortMethod, limit, offset))
    ipcMain.handle("smule.performances.uploadAuto", async (_event: IpcMainInvokeEvent, createRequest: import("../api/smule-requests").PerformanceCreateRequest, uploadType: "CREATE" | "JOIN", audioFile: string | Buffer, coverFile?: string | Buffer, updateThisPerformance?: any): Promise<any> => await client.performances.uploadAuto(createRequest, uploadType, audioFile, coverFile, updateThisPerformance))
    ipcMain.handle("smule.performances.upload", async (_event: IpcMainInvokeEvent, createRequest: import("../api/smule-requests").PerformanceCreateRequest, uploadType: "CREATE" | "JOIN", audioFile: string | Buffer, metaFile: string | Buffer, coverFile?: string | Buffer, updateThisPerformance?: any): Promise<any> => await client.performances.upload(createRequest, uploadType, audioFile, metaFile, coverFile, updateThisPerformance))
    ipcMain.handle("smule.search.fetchTrending", async (_event: IpcMainInvokeEvent): Promise<import("../api/smule-types").TrendingSearchResult> => await client.search.fetchTrending())
    ipcMain.handle("smule.search.perform", async (_event: IpcMainInvokeEvent, query: string): Promise<import("../api/smule-types").SearchResult> => await client.search.perform(query))
    ipcMain.handle("smule.search.performSpecific", async (_event: IpcMainInvokeEvent, query: string, type: import("../api/smule-types").SearchResultType, sort?: import("../api/smule-types").SearchResultSort, cursor?: string, limit?: number): Promise<import("../api/smule-types").SearchResult> => await client.search.performSpecific(query, type, sort, cursor, limit))
    ipcMain.handle("smule.search.fetchAutocomplete", async (_event: IpcMainInvokeEvent, query: string, limit?: number): Promise<import("../api/smule-types").AutocompleteResult> => await client.search.fetchAutocomplete(query, limit))
    ipcMain.handle("smule.avTemplates.fetch", async (_event: IpcMainInvokeEvent, limit?: number): Promise<import("../api/smule-types").AvTemplateCategoryListResult> => await client.avTemplates.fetch(limit))
    ipcMain.handle("smule.telemetry.markSongAsPlayed", async (_event: IpcMainInvokeEvent, arrKey: string): Promise<void> => await client.telemetry.markSongAsPlayed(arrKey))
    ipcMain.handle("smule.telemetry.markPerformanceAsPlayed", async (_event: IpcMainInvokeEvent, performanceKey: string): Promise<void> => await client.telemetry.markPerformanceAsPlayed(performanceKey))
    ipcMain.handle("smule.telemetry.markPerformanceListenStart", async (_event: IpcMainInvokeEvent, performanceKey: string): Promise<void> => await client.telemetry.markPerformanceListenStart(performanceKey))
    ipcMain.handle("smule.explore.fetchPlaylists", async (_event: IpcMainInvokeEvent): Promise<import("../api/smule-types").PlaylistExploreResult> => await client.explore.fetchPlaylists())
    ipcMain.handle("smule.explore.fetchPlaylist", async (_event: IpcMainInvokeEvent, playlistId: number, offset?: number, limit?: number): Promise<import("../api/smule-types").PlaylistGetResult> => await client.explore.fetchPlaylist(playlistId, offset, limit))
    ipcMain.handle("smule.explore.fetchAccounts", async (_event: IpcMainInvokeEvent, cursor?: string, limit?: number): Promise<import("../api/smule-types").AccountExploreResult> => await client.explore.fetchAccounts(cursor, limit))
    ipcMain.handle("smule.explore.fetchGroups", async (_event: IpcMainInvokeEvent, cursor?: string, limit?: number, sortBy?: string): Promise<import("../api/smule-types").SFAMExploreResult> => await client.explore.fetchGroups(cursor, limit, sortBy))
    ipcMain.handle("smule.explore.fetchLivestreams", async (_event: IpcMainInvokeEvent, cursor?: string, limit?: number, sort?: string): Promise<import("../api/smule-types").CampfireExploreResult> => await client.explore.fetchLivestreams(cursor, limit, sort))
    ipcMain.handle("smule.explore.fetchFeed", async (_event: IpcMainInvokeEvent, cursor?: string, limit?: number): Promise<import("../api/smule-types").SocialFeedListResult> => await client.explore.fetchFeed(cursor, limit))
    ipcMain.handle("smule.settings.fetch", async (_event: IpcMainInvokeEvent): Promise<import("../api/smule-types").SettingsResult> => await client.settings.fetch())
    ipcMain.handle("smule.TEST.profileStats", async (_event: IpcMainInvokeEvent): Promise<any> => await client.TEST.profileStats())
    ipcMain.handle("smule.TEST.statisticsYearly", async (_event: IpcMainInvokeEvent): Promise<any> => await client.TEST.statisticsYearly())
    ipcMain.handle("smule.TEST.rewardCoins", async (_event: IpcMainInvokeEvent): Promise<any> => await client.TEST.rewardCoins())
}