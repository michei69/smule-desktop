//    _____ ______ _   _ ______ _____         _______ ______ _____  
//   / ____|  ____| \ | |  ____|  __ \     /\|__   __|  ____|  __ \ 
//  | |  __| |__  |  \| | |__  | |__) |   /  \  | |  | |__  | |  | |
//  | | |_ |  __| | .   |  __| |  _  /   / /\ \ | |  |  __| | |  | |
//  | |__| | |____| |\  | |____| | \ \  / ____ \| |  | |____| |__| |
//   \_____|______|_| \_|______|_|  \_\/_/    \_\_|  |______|_____/ 

// This file was automatically generated by scripts/generateIPCFiles.ts
// Do not edit this file manually, as your changes will be overwritten.

import { ipcMain, IpcMainInvokeEvent } from "electron";
import { Smule, SmuleDotCom } from "smule.js";
export function initializeIPCHandler(client: Smule, sdcClient: SmuleDotCom) {
    ipcMain.handle("smule.account.lookup.byEmail", async (_event: IpcMainInvokeEvent, email: string): Promise<{ accountIcon: import("../../node_modules/smule.js/dist/index").AccountIcon; apps: string[]; }> => await client.account.lookup.byEmail(email));
    ipcMain.handle("smule.account.lookup.byIds", async (_event: IpcMainInvokeEvent, accountIds: number[]): Promise<import("../../node_modules/smule.js/dist/index").AccountLookupResult> => await client.account.lookup.byIds(accountIds));
    ipcMain.handle("smule.account.lookup.byId", async (_event: IpcMainInvokeEvent, accountId: number): Promise<import("../../node_modules/smule.js/dist/index").AccountIcon> => await client.account.lookup.byId(accountId));
    ipcMain.handle("smule.account.lookup.byContacts", async (_event: IpcMainInvokeEvent, contacts: import("../../node_modules/smule.js/dist/index").Contact[]): Promise<import("../../node_modules/smule.js/dist/index").ContactFindResult> => await client.account.lookup.byContacts(contacts));
    ipcMain.handle("smule.account.loginAsGuest", async (_event: IpcMainInvokeEvent): Promise<boolean> => await client.account.loginAsGuest());
    ipcMain.handle("smule.account.login", async (_event: IpcMainInvokeEvent, email: string, password: string): Promise<boolean> => await client.account.login(email, password));
    ipcMain.handle("smule.account.refreshLogin", async (_event: IpcMainInvokeEvent): Promise<boolean> => await client.account.refreshLogin());
    ipcMain.handle("smule.account.isLoggedIn", async (_event: IpcMainInvokeEvent): Promise<boolean> => await client.account.isLoggedIn());
    ipcMain.handle("smule.account.fetchSelf", async (_event: IpcMainInvokeEvent): Promise<import("../../node_modules/smule.js/dist/index").SingUserProfileResult> => await client.account.fetchSelf());
    ipcMain.handle("smule.account.fetchOne", async (_event: IpcMainInvokeEvent, accountId: number): Promise<import("../../node_modules/smule.js/dist/index").SingUserProfileResult> => await client.account.fetchOne(accountId));
    ipcMain.handle("smule.account.createWithEmail", async (_event: IpcMainInvokeEvent, email: string, password: string): Promise<import("../../node_modules/smule.js/dist/index").LoginResult> => await client.account.createWithEmail(email, password));
    ipcMain.handle("smule.account.uploadProfilePicture", async (_event: IpcMainInvokeEvent, imageData: Uint8Array): Promise<import("../../node_modules/smule.js/dist/index").UserUploadPictureResult> => await client.account.uploadProfilePicture(imageData));
    ipcMain.handle("smule.account.deleteProfilePicture", async (_event: IpcMainInvokeEvent): Promise<void> => await client.account.deleteProfilePicture());
    ipcMain.handle("smule.account.uploadCoverPicture", async (_event: IpcMainInvokeEvent, imageData: Uint8Array): Promise<void> => await client.account.uploadCoverPicture(imageData));
    ipcMain.handle("smule.account.deleteCoverPicture", async (_event: IpcMainInvokeEvent): Promise<void> => await client.account.deleteCoverPicture());
    ipcMain.handle("smule.account.changeUsername", async (_event: IpcMainInvokeEvent, username: string): Promise<void> => await client.account.changeUsername(username));
    ipcMain.handle("smule.account.changeEmail", async (_event: IpcMainInvokeEvent, email: string): Promise<void> => await client.account.changeEmail(email));
    ipcMain.handle("smule.account.changeBio", async (_event: IpcMainInvokeEvent, text: string): Promise<void> => await client.account.changeBio(text));
    ipcMain.handle("smule.account.changeVIPProfileStuff", async (_event: IpcMainInvokeEvent, colorTheme: { background: number; foreground: number; lightText: boolean; }, displayMentions: boolean, displayName: string): Promise<void> => await client.account.changeVIPProfileStuff(colorTheme, displayMentions, displayName));
    ipcMain.handle("smule.account.changeFullName", async (_event: IpcMainInvokeEvent, firstName: string, lastName: string): Promise<void> => await client.account.changeFullName(firstName, lastName));
    ipcMain.handle("smule.account.changePassword", async (_event: IpcMainInvokeEvent, newPassword: string): Promise<void> => await client.account.changePassword(newPassword));
    ipcMain.handle("smule.account.fetchPreferences", async (_event: IpcMainInvokeEvent): Promise<import("../../node_modules/smule.js/dist/index").PreferencesResult> => await client.account.fetchPreferences());
    ipcMain.handle("smule.account.changePreferences", async (_event: IpcMainInvokeEvent, preferences: { name: string; value: string; }[]): Promise<void> => await client.account.changePreferences(preferences));
    ipcMain.handle("smule.account.changeNewsletterConsent", async (_event: IpcMainInvokeEvent, consent: boolean): Promise<void> => await client.account.changeNewsletterConsent(consent));
    ipcMain.handle("smule.social.chat.create", async (_event: IpcMainInvokeEvent, address: string, type?: "ACCT" | "GRP"): Promise<any> => await client.social.chat.create(address, type));
    ipcMain.handle("smule.social.chat.connect", async (_event: IpcMainInvokeEvent): Promise<void> => await client.social.chat.connect());
    ipcMain.handle("smule.social.chat.addEventListener", async (_event: IpcMainInvokeEvent, eventName: "chatstate" | "receipt" | "message" | "history" | "state" | "error", callback: (...args: any[]) => void): Promise<void> => await client.social.chat.addEventListener(eventName, callback));
    ipcMain.handle("smule.social.chat.removeAllListeners", async (_event: IpcMainInvokeEvent): Promise<void> => await client.social.chat.removeAllListeners());
    ipcMain.handle("smule.social.chat.disconnect", async (_event: IpcMainInvokeEvent): Promise<void> => await client.social.chat.disconnect());
    ipcMain.handle("smule.social.chat.sendTextMessage", async (_event: IpcMainInvokeEvent, to: any, message: string): Promise<void> => await client.social.chat.sendTextMessage(to, message));
    ipcMain.handle("smule.social.chat.sendPerformanceMessage", async (_event: IpcMainInvokeEvent, to: any, performanceKey: string): Promise<void> => await client.social.chat.sendPerformanceMessage(to, performanceKey));
    ipcMain.handle("smule.social.chat.sendReceivedReceipt", async (_event: IpcMainInvokeEvent, to: any): Promise<void> => await client.social.chat.sendReceivedReceipt(to));
    ipcMain.handle("smule.social.chat.fetchChats", async (_event: IpcMainInvokeEvent): Promise<{ [key: number]: import("../../node_modules/smule.js/dist/index").SmuleChatContainer; }> => await client.social.chat.fetchChats());
    ipcMain.handle("smule.social.chat.fetchChat", async (_event: IpcMainInvokeEvent, user: number): Promise<import("../../node_modules/smule.js/dist/index").SmuleChatContainer> => await client.social.chat.fetchChat(user));
    ipcMain.handle("smule.social.chat.loadMessageHistory", async (_event: IpcMainInvokeEvent, limit?: number, before?: any, after?: any, user?: any): Promise<void> => await client.social.chat.loadMessageHistory(limit, before, after, user));
    ipcMain.handle("smule.social.chat.sendChatState", async (_event: IpcMainInvokeEvent, user: any, state?: import("../../node_modules/smule.js/dist/index").SmulePartnerStatus): Promise<void> => await client.social.chat.sendChatState(user, state));
    ipcMain.handle("smule.social.chat.getUserIdFromJID", async (_event: IpcMainInvokeEvent, jid: string | number): Promise<number> => await client.social.chat.getUserIdFromJID(jid));
    ipcMain.handle("smule.social.chat.getJIDFromUserId", async (_event: IpcMainInvokeEvent, userId: string | number): Promise<string> => await client.social.chat.getJIDFromUserId(userId));
    ipcMain.handle("smule.social.isFollowingUsers", async (_event: IpcMainInvokeEvent, accountIds: number[]): Promise<import("../../node_modules/smule.js/dist/index").SocialIsFollowingResult> => await client.social.isFollowingUsers(accountIds));
    ipcMain.handle("smule.social.isFollowingUser", async (_event: IpcMainInvokeEvent, accountId: number): Promise<import("../../node_modules/smule.js/dist/index").SocialIsFollowingResult> => await client.social.isFollowingUser(accountId));
    ipcMain.handle("smule.social.followUsers", async (_event: IpcMainInvokeEvent, accountIds: number[]): Promise<void> => await client.social.followUsers(accountIds));
    ipcMain.handle("smule.social.followUser", async (_event: IpcMainInvokeEvent, accountId: number): Promise<void> => await client.social.followUser(accountId));
    ipcMain.handle("smule.social.unfollowUsers", async (_event: IpcMainInvokeEvent, accountIds: number[]): Promise<void> => await client.social.unfollowUsers(accountIds));
    ipcMain.handle("smule.social.unfollowUser", async (_event: IpcMainInvokeEvent, accountId: number): Promise<void> => await client.social.unfollowUser(accountId));
    ipcMain.handle("smule.social.fetchFollowings", async (_event: IpcMainInvokeEvent, accountId: number): Promise<import("../../node_modules/smule.js/dist/index").SocialFolloweesResult> => await client.social.fetchFollowings(accountId));
    ipcMain.handle("smule.social.fetchFollowers", async (_event: IpcMainInvokeEvent, accountId: number): Promise<import("../../node_modules/smule.js/dist/index").SocialFollowersResult> => await client.social.fetchFollowers(accountId));
    ipcMain.handle("smule.social.fetchComments", async (_event: IpcMainInvokeEvent, performanceKey: string, offset?: number, limit?: number): Promise<import("../../node_modules/smule.js/dist/index").PerformanceCommentsResult> => await client.social.fetchComments(performanceKey, offset, limit));
    ipcMain.handle("smule.social.likeComment", async (_event: IpcMainInvokeEvent, performanceKey: string, commentKey: string): Promise<void> => await client.social.likeComment(performanceKey, commentKey));
    ipcMain.handle("smule.social.unlikeComment", async (_event: IpcMainInvokeEvent, performanceKey: string, commentKey: string): Promise<void> => await client.social.unlikeComment(performanceKey, commentKey));
    ipcMain.handle("smule.social.fetchCommentLikes", async (_event: IpcMainInvokeEvent, performanceKey: string, commentKey: string): Promise<import("../../node_modules/smule.js/dist/index").SocialCommentLikesResult> => await client.social.fetchCommentLikes(performanceKey, commentKey));
    ipcMain.handle("smule.social.createComment", async (_event: IpcMainInvokeEvent, performanceKey: string, comment: string, latitude?: number, longitude?: number): Promise<import("../../node_modules/smule.js/dist/index").PerformanceCreateCommentResult> => await client.social.createComment(performanceKey, comment, latitude, longitude));
    ipcMain.handle("smule.social.deleteComments", async (_event: IpcMainInvokeEvent, performanceKey: string, postKeys: string[]): Promise<void> => await client.social.deleteComments(performanceKey, postKeys));
    ipcMain.handle("smule.social.deleteComment", async (_event: IpcMainInvokeEvent, performanceKey: string, postKey: string): Promise<void> => await client.social.deleteComment(performanceKey, postKey));
    ipcMain.handle("smule.social.likePerformance", async (_event: IpcMainInvokeEvent, performanceKey: string): Promise<void> => await client.social.likePerformance(performanceKey));
    ipcMain.handle("smule.social.fetchBlocked", async (_event: IpcMainInvokeEvent): Promise<import("../../node_modules/smule.js/dist/index").SocialBlockListResult> => await client.social.fetchBlocked());
    ipcMain.handle("smule.social.blockUsers", async (_event: IpcMainInvokeEvent, accountIds: number[]): Promise<void> => await client.social.blockUsers(accountIds));
    ipcMain.handle("smule.social.blockUser", async (_event: IpcMainInvokeEvent, accountId: number): Promise<void> => await client.social.blockUser(accountId));
    ipcMain.handle("smule.social.unblockUsers", async (_event: IpcMainInvokeEvent, accountIds: number[]): Promise<void> => await client.social.unblockUsers(accountIds));
    ipcMain.handle("smule.social.unblockUser", async (_event: IpcMainInvokeEvent, accountId: number): Promise<void> => await client.social.unblockUser(accountId));
    ipcMain.handle("smule.social.fetchProfileViews", async (_event: IpcMainInvokeEvent, period?: "WEEK" | "MONTH" | "QUARTER", cursor?: string, limit?: number): Promise<import("../../node_modules/smule.js/dist/index").AccountProfileStatsViewsResult> => await client.social.fetchProfileViews(period, cursor, limit));
    ipcMain.handle("smule.social.fetchPersonalInvites", async (_event: IpcMainInvokeEvent, cursor?: string, limit?: number): Promise<import("../../node_modules/smule.js/dist/index").InviteMeResult> => await client.social.fetchPersonalInvites(cursor, limit));
    ipcMain.handle("smule.social.fetchInvites", async (_event: IpcMainInvokeEvent, cursor?: string, limit?: number): Promise<import("../../node_modules/smule.js/dist/index").InviteListResult> => await client.social.fetchInvites(cursor, limit));
    ipcMain.handle("smule.songs.fetchSongbook", async (_event: IpcMainInvokeEvent, cursor?: string, limit?: number): Promise<import("../../node_modules/smule.js/dist/index").SongbookResult> => await client.songs.fetchSongbook(cursor, limit));
    ipcMain.handle("smule.songs.updateSongbook", async (_event: IpcMainInvokeEvent, categoryIds: number[]): Promise<any> => await client.songs.updateSongbook(categoryIds));
    ipcMain.handle("smule.songs.fetchFromCategory", async (_event: IpcMainInvokeEvent, cursor?: string, categoryId?: number, limit?: number, duetAccountId?: number): Promise<import("../../node_modules/smule.js/dist/index").CategorySongsResult> => await client.songs.fetchFromCategory(cursor, categoryId, limit, duetAccountId));
    ipcMain.handle("smule.songs.fetchCategoryList", async (_event: IpcMainInvokeEvent, sortType?: "POPULAR" | "ALPHA"): Promise<import("../../node_modules/smule.js/dist/index").CategoryListResult> => await client.songs.fetchCategoryList(sortType));
    ipcMain.handle("smule.songs.fetchOne", async (_event: IpcMainInvokeEvent, key: string): Promise<import("../../node_modules/smule.js/dist/index").ArrResult> => await client.songs.fetchOne(key));
    ipcMain.handle("smule.songs.fetchOneFromRaven", async (_event: IpcMainInvokeEvent, ravenSongId: string): Promise<import("../../node_modules/smule.js/dist/index").ArrResult> => await client.songs.fetchOneFromRaven(ravenSongId));
    ipcMain.handle("smule.songs.fetch", async (_event: IpcMainInvokeEvent, keys: string[]): Promise<import("../../node_modules/smule.js/dist/index").ArrByKeysResult> => await client.songs.fetch(keys));
    ipcMain.handle("smule.songs.fetchOwnedBy", async (_event: IpcMainInvokeEvent, ownerId: number, offset?: number, limit?: number): Promise<any> => await client.songs.fetchOwnedBy(ownerId, offset, limit));
    ipcMain.handle("smule.songs.fetchFromGenres", async (_event: IpcMainInvokeEvent, genreIds: number[]): Promise<import("../../node_modules/smule.js/dist/index").TopicOptionResult> => await client.songs.fetchFromGenres(genreIds));
    ipcMain.handle("smule.songs.fetchLyricsAndPitches", async (_event: IpcMainInvokeEvent, key: string): Promise<{ lyrics: import("../../node_modules/smule.js/dist/index").SmuleLyric[]; pitches: import("../../node_modules/smule.js/dist/index").SmulePitchesData; type: "RAVEN" | "COMMUNITY"; }> => await client.songs.fetchLyricsAndPitches(key));
    ipcMain.handle("smule.songs.bookmark", async (_event: IpcMainInvokeEvent, key: string): Promise<void> => await client.songs.bookmark(key));
    ipcMain.handle("smule.songs.unbookmark", async (_event: IpcMainInvokeEvent, key: string): Promise<void> => await client.songs.unbookmark(key));
    ipcMain.handle("smule.songs.fetchBookmarks", async (_event: IpcMainInvokeEvent, cursor?: string, limit?: number): Promise<import("../../node_modules/smule.js/dist/index").ArrBookmarkListResult> => await client.songs.fetchBookmarks(cursor, limit));
    ipcMain.handle("smule.songs.update", async (_event: IpcMainInvokeEvent, key: string, artist?: string, name?: string, tags?: string[]): Promise<any> => await client.songs.update(key, artist, name, tags));
    ipcMain.handle("smule.songs.vote", async (_event: IpcMainInvokeEvent, key: string, arrVersion: number, reason: string, vote: "UP" | "DOWN"): Promise<any> => await client.songs.vote(key, arrVersion, reason, vote));
    ipcMain.handle("smule.songs.delete", async (_event: IpcMainInvokeEvent, key: string, deletePerformances?: boolean): Promise<any> => await client.songs.delete(key, deletePerformances));
    ipcMain.handle("smule.performances.lookUp.byKeys", async (_event: IpcMainInvokeEvent, performanceKeys: string[]): Promise<import("../../node_modules/smule.js/dist/index").PerformanceByKeysResult> => await client.performances.lookUp.byKeys(performanceKeys));
    ipcMain.handle("smule.performances.lookUp.byKey", async (_event: IpcMainInvokeEvent, performanceKey: string): Promise<import("../../node_modules/smule.js/dist/index").PerformanceIcon> => await client.performances.lookUp.byKey(performanceKey));
    ipcMain.handle("smule.performances.lookUp.byUser", async (_event: IpcMainInvokeEvent, accountId: number, fillStatus?: import("../../node_modules/smule.js/dist/index").PerformancesFillStatus, sortMethod?: import("../../node_modules/smule.js/dist/index").PerformanceSortMethod, limit?: number, offset?: number): Promise<import("../../node_modules/smule.js/dist/index").PerformancesByUserResult> => await client.performances.lookUp.byUser(accountId, fillStatus, sortMethod, limit, offset));
    ipcMain.handle("smule.performances.lookUp.byAvTemplate", async (_event: IpcMainInvokeEvent, templateId: number, cursor?: string, limit?: number, performanceKey?: string): Promise<import("../../node_modules/smule.js/dist/index").PerformancesByAvTemplateResult> => await client.performances.lookUp.byAvTemplate(templateId, cursor, limit, performanceKey));
    ipcMain.handle("smule.performances.lookUp.byGenre", async (_event: IpcMainInvokeEvent, genreId: number, offset?: number, limit?: number, fillStatus?: import("../../node_modules/smule.js/dist/index").PerformancesFillStatus, sort?: import("../../node_modules/smule.js/dist/index").PerformancesSortOrder): Promise<import("../../node_modules/smule.js/dist/index").PerformanceList> => await client.performances.lookUp.byGenre(genreId, offset, limit, fillStatus, sort));
    ipcMain.handle("smule.performances.list", async (_event: IpcMainInvokeEvent, sort?: import("../../node_modules/smule.js/dist/index").PerformancesSortOrder, fillStatus?: import("../../node_modules/smule.js/dist/index").PerformancesFillStatus, limit?: number, offset?: number): Promise<import("../../node_modules/smule.js/dist/index").PerformanceList> => await client.performances.list(sort, fillStatus, limit, offset));
    ipcMain.handle("smule.performances.fetchList", async (_event: IpcMainInvokeEvent, key: string, sort?: import("../../node_modules/smule.js/dist/index").PerformancesSortOrder, fillStatus?: import("../../node_modules/smule.js/dist/index").PerformancesFillStatus, limit?: number, offset?: number, video?: boolean): Promise<import("../../node_modules/smule.js/dist/index").PerformanceList> => await client.performances.fetchList(key, sort, fillStatus, limit, offset, video));
    ipcMain.handle("smule.performances.fetchLists", async (_event: IpcMainInvokeEvent, requests: import("../../node_modules/smule.js/dist/index").PerformanceReq[]): Promise<{ perfLists: import("../../node_modules/smule.js/dist/index").PerformanceList[]; }> => await client.performances.fetchLists(requests));
    ipcMain.handle("smule.performances.fetchOne", async (_event: IpcMainInvokeEvent, performanceKey: string): Promise<import("../../node_modules/smule.js/dist/index").PerformanceResult> => await client.performances.fetchOne(performanceKey));
    ipcMain.handle("smule.performances.fetchFromAccount", async (_event: IpcMainInvokeEvent, accountId: number, fillStatus?: import("../../node_modules/smule.js/dist/index").PerformancesFillStatus, sortMethod?: import("../../node_modules/smule.js/dist/index").PerformanceSortMethod, limit?: number, offset?: number): Promise<import("../../node_modules/smule.js/dist/index").PerformancePartsResult> => await client.performances.fetchFromAccount(accountId, fillStatus, sortMethod, limit, offset));
    ipcMain.handle("smule.performances.fetchBookmarkedInvites", async (_event: IpcMainInvokeEvent, offset?: number, limit?: number): Promise<import("../../node_modules/smule.js/dist/index").PerformanceBookmarkSeedResult> => await client.performances.fetchBookmarkedInvites(offset, limit));
    ipcMain.handle("smule.performances.fetchChildren", async (_event: IpcMainInvokeEvent, performanceKey: string, limit?: number, offset?: number): Promise<import("../../node_modules/smule.js/dist/index").PerformanceList> => await client.performances.fetchChildren(performanceKey, limit, offset));
    ipcMain.handle("smule.performances.fetchDetails", async (_event: IpcMainInvokeEvent, performanceKeys: string[]): Promise<import("../../node_modules/smule.js/dist/index").PerformanceDetailsResult> => await client.performances.fetchDetails(performanceKeys));
    ipcMain.handle("smule.performances.fetchDetailsForOne", async (_event: IpcMainInvokeEvent, performanceKey: string): Promise<import("../../node_modules/smule.js/dist/index").PerformanceDetail> => await client.performances.fetchDetailsForOne(performanceKey));
    ipcMain.handle("smule.performances.uploadAuto", async (_event: IpcMainInvokeEvent, createRequest: import("../../node_modules/smule.js/dist/index").PerformanceCreateRequest, uploadType: "CREATE" | "JOIN", audioFile: string | Buffer, coverFile?: string | Buffer, updateThisPerformance?: any): Promise<any> => await client.performances.uploadAuto(createRequest, uploadType, audioFile, coverFile, updateThisPerformance));
    ipcMain.handle("smule.performances.upload", async (_event: IpcMainInvokeEvent, createRequest: import("../../node_modules/smule.js/dist/index").PerformanceCreateRequest, uploadType: "CREATE" | "JOIN", audioFile: string | Buffer, metaFile: string | Buffer, coverFile?: string | Buffer, updateThisPerformance?: any): Promise<any> => await client.performances.upload(createRequest, uploadType, audioFile, metaFile, coverFile, updateThisPerformance));
    ipcMain.handle("smule.performances.deleteOne", async (_event: IpcMainInvokeEvent, performanceKey: string): Promise<void> => await client.performances.deleteOne(performanceKey));
    ipcMain.handle("smule.performances.bookmarkInvites", async (_event: IpcMainInvokeEvent, performanceKeys: string[]): Promise<void> => await client.performances.bookmarkInvites(performanceKeys));
    ipcMain.handle("smule.performances.unbookmarkInvites", async (_event: IpcMainInvokeEvent, performanceKeys: string[]): Promise<void> => await client.performances.unbookmarkInvites(performanceKeys));
    ipcMain.handle("smule.search.fetchTrending", async (_event: IpcMainInvokeEvent): Promise<import("../../node_modules/smule.js/dist/index").RecTrendingSearchResult> => await client.search.fetchTrending());
    ipcMain.handle("smule.search.perform", async (_event: IpcMainInvokeEvent, query: string): Promise<import("../../node_modules/smule.js/dist/index").SearchResult> => await client.search.perform(query));
    ipcMain.handle("smule.search.performSpecific", async (_event: IpcMainInvokeEvent, query: string, type: import("../../node_modules/smule.js/dist/index").SearchResultType, sort?: import("../../node_modules/smule.js/dist/index").SearchResultSort, cursor?: string, limit?: number): Promise<import("../../node_modules/smule.js/dist/index").SearchResult> => await client.search.performSpecific(query, type, sort, cursor, limit));
    ipcMain.handle("smule.search.fetchAutocomplete", async (_event: IpcMainInvokeEvent, query: string, limit?: number): Promise<import("../../node_modules/smule.js/dist/index").SearchAutocompleteResult> => await client.search.fetchAutocomplete(query, limit));
    ipcMain.handle("smule.avTemplates.fetch", async (_event: IpcMainInvokeEvent, limit?: number): Promise<import("../../node_modules/smule.js/dist/index").AvTemplateCategoryListResult> => await client.avTemplates.fetch(limit));
    ipcMain.handle("smule.telemetry.markSongAsPlayed", async (_event: IpcMainInvokeEvent, arrKey: string): Promise<void> => await client.telemetry.markSongAsPlayed(arrKey));
    ipcMain.handle("smule.telemetry.markPerformanceAsPlayed", async (_event: IpcMainInvokeEvent, performanceKey: string): Promise<void> => await client.telemetry.markPerformanceAsPlayed(performanceKey));
    ipcMain.handle("smule.telemetry.markPerformanceListenStart", async (_event: IpcMainInvokeEvent, performanceKey: string): Promise<void> => await client.telemetry.markPerformanceListenStart(performanceKey));
    ipcMain.handle("smule.explore.fetchPlaylists", async (_event: IpcMainInvokeEvent): Promise<import("../../node_modules/smule.js/dist/index").PlaylistExploreResult> => await client.explore.fetchPlaylists());
    ipcMain.handle("smule.explore.fetchPlaylist", async (_event: IpcMainInvokeEvent, playlistId: number, offset?: number, limit?: number): Promise<import("../../node_modules/smule.js/dist/index").PlaylistGetResult> => await client.explore.fetchPlaylist(playlistId, offset, limit));
    ipcMain.handle("smule.explore.fetchAccounts", async (_event: IpcMainInvokeEvent, cursor?: string, limit?: number): Promise<import("../../node_modules/smule.js/dist/index").AccountExploreResult> => await client.explore.fetchAccounts(cursor, limit));
    ipcMain.handle("smule.explore.fetchRecommendedAccounts", async (_event: IpcMainInvokeEvent, cursor?: string, limit?: number): Promise<import("../../node_modules/smule.js/dist/index").AccountExploreResult> => await client.explore.fetchRecommendedAccounts(cursor, limit));
    ipcMain.handle("smule.explore.fetchGroups", async (_event: IpcMainInvokeEvent, cursor?: string, limit?: number, sortBy?: string): Promise<import("../../node_modules/smule.js/dist/index").SFamListResult> => await client.explore.fetchGroups(cursor, limit, sortBy));
    ipcMain.handle("smule.explore.fetchLivestreams", async (_event: IpcMainInvokeEvent, cursor?: string, limit?: number, sort?: string): Promise<import("../../node_modules/smule.js/dist/index").CampfireListResult> => await client.explore.fetchLivestreams(cursor, limit, sort));
    ipcMain.handle("smule.explore.fetchFeed", async (_event: IpcMainInvokeEvent, cursor?: string, limit?: number): Promise<import("../../node_modules/smule.js/dist/index").SocialFeedListResult> => await client.explore.fetchFeed(cursor, limit));
    ipcMain.handle("smule.explore.fetchGenres", async (_event: IpcMainInvokeEvent, cursor?: number, limit?: number): Promise<import("../../node_modules/smule.js/dist/index").TopicOptionResult> => await client.explore.fetchGenres(cursor, limit));
    ipcMain.handle("smule.explore.fetchYourGenres", async (_event: IpcMainInvokeEvent): Promise<import("../../node_modules/smule.js/dist/index").TopicOptionResult> => await client.explore.fetchYourGenres());
    ipcMain.handle("smule.settings.fetch", async (_event: IpcMainInvokeEvent): Promise<import("../../node_modules/smule.js/dist/index").SettingsResult> => await client.settings.fetch());
    ipcMain.handle("smule.live.chat.connect", async (_event: IpcMainInvokeEvent, host: string, cfireJID: string): Promise<void> => await client.live.chat.connect(host, cfireJID));
    ipcMain.handle("smule.live.chat.addEventListener", async (_event: IpcMainInvokeEvent, eventName: "message" | "history" | "state" | "error" | "performance-start" | "create-mic-request" | "cancel-mic-request" | "presence" | "gift-sent" | "new-host" | "host-left", callback: (...args: any[]) => void): Promise<void> => await client.live.chat.addEventListener(eventName, callback));
    ipcMain.handle("smule.live.chat.removeAllListeners", async (_event: IpcMainInvokeEvent): Promise<void> => await client.live.chat.removeAllListeners());
    ipcMain.handle("smule.live.chat.disconnect", async (_event: IpcMainInvokeEvent): Promise<void> => await client.live.chat.disconnect());
    ipcMain.handle("smule.live.chat.sendTextMessage", async (_event: IpcMainInvokeEvent, to: any, message: string): Promise<void> => await client.live.chat.sendTextMessage(to, message));
    ipcMain.handle("smule.live.chat.fetchChat", async (_event: IpcMainInvokeEvent): Promise<import("../../node_modules/smule.js/dist/index").SmuleChatContainer> => await client.live.chat.fetchChat());
    ipcMain.handle("smule.live.chat.fetchUsers", async (_event: IpcMainInvokeEvent): Promise<any[]> => await client.live.chat.fetchUsers());
    ipcMain.handle("smule.live.chat.loadMessageHistory", async (_event: IpcMainInvokeEvent, limit?: number, before?: any, after?: any, user?: any): Promise<void> => await client.live.chat.loadMessageHistory(limit, before, after, user));
    ipcMain.handle("smule.live.fetch", async (_event: IpcMainInvokeEvent, campfireId: number): Promise<import("../../node_modules/smule.js/dist/index").CampfireSyncResult> => await client.live.fetch(campfireId));
    ipcMain.handle("smule.groups.fetchOne", async (_event: IpcMainInvokeEvent, groupId: number): Promise<import("../../node_modules/smule.js/dist/index").SFamInfoResult> => await client.groups.fetchOne(groupId));
    ipcMain.handle("smule.groups.fetchPosts", async (_event: IpcMainInvokeEvent, groupId: number, cursor?: string, limit?: number): Promise<import("../../node_modules/smule.js/dist/index").SocialFeedListResult> => await client.groups.fetchPosts(groupId, cursor, limit));
    ipcMain.handle("smule.groups.fetchMembers", async (_event: IpcMainInvokeEvent, groupId: number, cursor?: string, limit?: number, roles?: number[]): Promise<import("../../node_modules/smule.js/dist/index").SFamMemberListResult> => await client.groups.fetchMembers(groupId, cursor, limit, roles));
    ipcMain.handle("smule.groups.join", async (_event: IpcMainInvokeEvent, groupId: number): Promise<import("../../node_modules/smule.js/dist/index").SFamMembershipType> => await client.groups.join(groupId));
    ipcMain.handle("smule.groups.uploadCoverPicture", async (_event: IpcMainInvokeEvent, imageData: Uint8Array): Promise<any> => await client.groups.uploadCoverPicture(imageData));
    ipcMain.handle("smule.groups.create", async (_event: IpcMainInvokeEvent, name: string, desc: string, lang: string, loc: string, picId: number, sfamTag: string): Promise<import("../../node_modules/smule.js/dist/index").SFam> => await client.groups.create(name, desc, lang, loc, picId, sfamTag));
    ipcMain.handle("smule.groups.postPerformances", async (_event: IpcMainInvokeEvent, performanceKeys: string[], groupId: number): Promise<void> => await client.groups.postPerformances(performanceKeys, groupId));
    ipcMain.handle("smule.groups.removePost", async (_event: IpcMainInvokeEvent, groupId: number, postId: number, postType?: "FEED"): Promise<void> => await client.groups.removePost(groupId, postId, postType));
    ipcMain.handle("smule.playlists.create", async (_event: IpcMainInvokeEvent, name: string, visibility?: import("../../node_modules/smule.js/dist/index").PlaylistVisibility): Promise<import("../../node_modules/smule.js/dist/index").PlaylistIcon> => await client.playlists.create(name, visibility));
    ipcMain.handle("smule.playlists.addPerformance", async (_event: IpcMainInvokeEvent, playlistKey: string, performanceKey: string): Promise<void> => await client.playlists.addPerformance(playlistKey, performanceKey));
    ipcMain.handle("smule.playlists.changeVisibility", async (_event: IpcMainInvokeEvent, playlistKey: string, visibility: import("../../node_modules/smule.js/dist/index").PlaylistVisibility): Promise<import("../../node_modules/smule.js/dist/index").PlaylistIcon> => await client.playlists.changeVisibility(playlistKey, visibility));
    ipcMain.handle("smule.playlists.changeName", async (_event: IpcMainInvokeEvent, playlistKey: string, name: string): Promise<import("../../node_modules/smule.js/dist/index").PlaylistIcon> => await client.playlists.changeName(playlistKey, name));
    ipcMain.handle("smule.playlists.fetchOne", async (_event: IpcMainInvokeEvent, playlistKey: string, sortMethod: import("../../node_modules/smule.js/dist/index").PlaylistSortMethod, cursor?: string, limit?: number): Promise<import("../../node_modules/smule.js/dist/index").PlaylistViewResult> => await client.playlists.fetchOne(playlistKey, sortMethod, cursor, limit));
    ipcMain.handle("smule.playlists.deleteOne", async (_event: IpcMainInvokeEvent, playlistKey: string): Promise<void> => await client.playlists.deleteOne(playlistKey));
    ipcMain.handle("smule.TEST.runRawRequest", async (_event: IpcMainInvokeEvent, url: string, data: any): Promise<import("../../node_modules/smule.js/node_modules/axios/index").AxiosResponse<any, any>> => await client.TEST.runRawRequest(url, data));
    ipcMain.handle("smuledotcom.resetCookies", async (_event: IpcMainInvokeEvent) => {const res = await sdcClient.resetCookies(); return res;});
    ipcMain.handle("smuledotcom.getAccount", async (_event: IpcMainInvokeEvent) => {const res = await sdcClient.getAccount(); return res;});
    ipcMain.handle("smuledotcom.fetchXsrfToken", async (_event: IpcMainInvokeEvent) => {const res = await sdcClient.fetchXsrfToken(); return res;});
    ipcMain.handle("smuledotcom.checkEmailExists", async (_event: IpcMainInvokeEvent, email) => {const res = await sdcClient.checkEmailExists(email); return res;});
    ipcMain.handle("smuledotcom.login", async (_event: IpcMainInvokeEvent, email, password) => {const res = await sdcClient.login(email, password); return res;});
    ipcMain.handle("smuledotcom.fetchAccount", async (_event: IpcMainInvokeEvent) => {const res = await sdcClient.fetchAccount(); return res;});
    ipcMain.handle("smuledotcom.createArrangement", async (_event: IpcMainInvokeEvent, songFile) => {const res = await sdcClient.createArrangement(songFile); return res;});
    ipcMain.handle("smuledotcom.fetchArrUploadData", async (_event: IpcMainInvokeEvent, arrKey) => {const res = await sdcClient.fetchArrUploadData(arrKey); return res;});
    ipcMain.handle("smuledotcom.generateSegments", async (_event: IpcMainInvokeEvent, arr) => {const res = await sdcClient.generateSegments(arr); return res;});
    ipcMain.handle("smuledotcom.saveArr", async (_event: IpcMainInvokeEvent, arr) => {const res = await sdcClient.saveArr(arr); return res;});
    ipcMain.handle("smuledotcom.fetchTitleAutocomplete", async (_event: IpcMainInvokeEvent, query) => {const res = await sdcClient.fetchTitleAutocomplete(query); return res;});
    ipcMain.handle("smuledotcom.fetchArtistAutocomplete", async (_event: IpcMainInvokeEvent, query) => {const res = await sdcClient.fetchArtistAutocomplete(query); return res;});
    ipcMain.handle("smuledotcom.fetchGenreAutocomplete", async (_event: IpcMainInvokeEvent, query) => {const res = await sdcClient.fetchGenreAutocomplete(query); return res;});
    ipcMain.handle("smuledotcom.fetchTagAutocomplete", async (_event: IpcMainInvokeEvent, query) => {const res = await sdcClient.fetchTagAutocomplete(query); return res;});
    ipcMain.handle("smuledotcom.matchCatalog", async (_event: IpcMainInvokeEvent, title, artist, tags) => {const res = await sdcClient.matchCatalog(title, artist, tags); return res;});
    ipcMain.handle("smuledotcom.detectLanguage", async (_event: IpcMainInvokeEvent, text) => {const res = await sdcClient.detectLanguage(text); return res;});
    ipcMain.handle("smuledotcom.deleteArr", async (_event: IpcMainInvokeEvent, arrKey) => {const res = await sdcClient.deleteArr(arrKey); return res;});
    ipcMain.handle("smuledotcom.fetchProfile", async (_event: IpcMainInvokeEvent, username) => {const res = await sdcClient.fetchProfile(username); return res;});
    ipcMain.handle("smuledotcom.fetchSongs", async (_event: IpcMainInvokeEvent, accountId, offset, limit) => {const res = await sdcClient.fetchSongs(accountId, offset, limit); return res;});
}